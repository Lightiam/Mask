import React, { useState, useEffect, useRef } from 'react';
import { Mic, MicOff, Settings, Volume2, Bot } from 'lucide-react';
import { toast } from 'react-hot-toast';

export default function VoiceRecognition({ selectedJobDescription }) {
  const [isListening, setIsListening] = useState(false);
  const [transcript, setTranscript] = useState('');
  const [response, setResponse] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [audioLevel, setAudioLevel] = useState(0);
  const [groqApiKey, setGroqApiKey] = useState('');
  const [showSettings, setShowSettings] = useState(false);

  const recognitionRef = useRef(null);
  const audioContextRef = useRef(null);
  const analyserRef = useRef(null);
  const animationRef = useRef(null);

  useEffect(() => {
    if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
      recognitionRef.current = new SpeechRecognition();

      recognitionRef.current.continuous = true;
      recognitionRef.current.interimResults = true;
      recognitionRef.current.lang = 'en-US';

      recognitionRef.current.onresult = (event) => {
        let finalTranscript = '';
        for (let i = event.resultIndex; i < event.results.length; i++) {
          if (event.results[i].isFinal) {
            finalTranscript += event.results[i][0].transcript;
          }
        }
        if (finalTranscript) {
          setTranscript(finalTranscript);
          handleSearch(finalTranscript);
        }
      };

      recognitionRef.current.onerror = (event) => {
        console.error('Speech recognition error:', event.error);
        setIsListening(false);
        if (event.error === 'not-allowed') {
          toast.error('Microphone access denied. Please allow microphone access and try again.');
        } else {
          toast.error(`Speech recognition error: ${event.error}`);
        }
      };

      recognitionRef.current.onend = () => {
        setIsListening(false);
        setAudioLevel(0);
      };
    } else {
      toast.error('Speech recognition not supported in this browser. Please use Chrome, Edge, or Safari.');
    }

    return () => {
      if (recognitionRef.current) {
        recognitionRef.current.stop();
      }
      if (audioContextRef.current) {
        audioContextRef.current.close();
      }
      if (animationRef.current) {
        cancelAnimationFrame(animationRef.current);
      }
    };
  }, []);

  const startListening = async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });

      // Set up audio context for visualization
      audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)();
      analyserRef.current = audioContextRef.current.createAnalyser();
      const source = audioContextRef.current.createMediaStreamSource(stream);
      source.connect(analyserRef.current);

      analyserRef.current.fftSize = 256;
      const bufferLength = analyserRef.current.frequencyBinCount;
      const dataArray = new Uint8Array(bufferLength);

      const updateAudioLevel = () => {
        analyserRef.current.getByteFrequencyData(dataArray);
        const average = dataArray.reduce((a, b) => a + b) / bufferLength;
        setAudioLevel(average);
        animationRef.current = requestAnimationFrame(updateAudioLevel);
      };
      updateAudioLevel();

      if (recognitionRef.current) {
        recognitionRef.current.start();
        setIsListening(true);
        setTranscript('');
        setResponse('');
        toast.success('Pallybot AI is listening...');
      }
    } catch (error) {
      console.error('Microphone access error:', error);
      toast.error('Could not access microphone. Please check permissions.');
    }
  };

  const stopListening = () => {
    if (recognitionRef.current) {
      recognitionRef.current.stop();
    }
    if (audioContextRef.current) {
      audioContextRef.current.close();
    }
    if (animationRef.current) {
      cancelAnimationFrame(animationRef.current);
    }
    setIsListening(false);
    setAudioLevel(0);
    toast.success('Stopped listening');
  };

  const handleSearch = async (question) => {
    if (!question.trim()) return;

    setIsLoading(true);
    try {
      let answer = '';

      if (groqApiKey) {
        answer = await getGroqResponse(question);
      } else {
        answer = getBuiltInResponse(question);
      }

      setResponse(answer);
      toast.success('Response generated by Pallybot AI');
    } catch (error) {
      console.error('Error getting response:', error);
      const fallbackAnswer = getBuiltInResponse(question);
      setResponse(fallbackAnswer);
      toast.error('Error with AI service, using built-in response');
    } finally {
      setIsLoading(false);
    }
  };

  const getGroqResponse = async (question) => {
    const jobContext = selectedJobDescription ? 
      `Job Context: ${selectedJobDescription.title} at ${selectedJobDescription.company}. ${selectedJobDescription.description}` : 
      '';

    const prompt = `You are Pallybot AI, an expert interview coach. ${jobContext}

    Interview Question: "${question}"

    Provide a professional, structured response following these guidelines:
    - Keep responses concise (2-3 paragraphs max)
    - Use the STAR method for behavioral questions when applicable
    - Tailor the response to the job context if provided
    - Include specific examples when relevant
    - End with confidence and enthusiasm`;

    const response = await fetch('https://api.groq.com/openai/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${groqApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'mixtral-8x7b-32768',
        messages: [{ role: 'user', content: prompt }],
        max_tokens: 500,
        temperature: 0.7,
      }),
    });

    if (!response.ok) {
      throw new Error('Groq API request failed');
    }

    const data = await response.json();
    return data.choices[0]?.message?.content || 'No response generated';
  };

  const getBuiltInResponse = (question) => {
    const lowerQuestion = question.toLowerCase();

    const responses = {
      'tell me about yourself': `Hi! I'm a passionate professional with strong experience in my field. I enjoy solving complex problems and contributing to team success. I'm particularly excited about this opportunity because it aligns perfectly with my career goals and skills. I'm known for my collaborative approach and ability to deliver results under pressure.`,

      'why do you want this job': `I'm genuinely excited about this role because it offers the perfect combination of challenges I'm looking for and aligns with my career aspirations. Your company's reputation for innovation and excellence really appeals to me, and I believe my skills would contribute significantly to your team's success.`,

      'what are your strengths': `My key strengths include strong problem-solving abilities, excellent communication skills, and a collaborative mindset. I'm particularly good at breaking down complex challenges into manageable parts and working effectively with diverse teams to achieve common goals.`,

      'what are your weaknesses': `I'd say I sometimes focus too much on perfecting details, which can slow me down initially. However, I've been working on balancing thoroughness with efficiency by setting clear deadlines and priorities for myself. This has helped me maintain high quality while improving my pace.`,

      'where do you see yourself in 5 years': `In five years, I see myself having grown significantly in my expertise and taking on more leadership responsibilities. I'd love to be mentoring others and contributing to strategic decisions that drive organizational success. This role feels like an important step toward that vision.`,

      'lateral movement': `Lateral movement in cybersecurity refers to the technique attackers use to move through a network after gaining initial access. Once inside, they explore the network, escalate privileges, and access additional systems to reach their ultimate target. It's like moving sideways through the organization rather than just attacking from the outside.`,

      'cyber security': `Cybersecurity is the practice of defending computers, servers, mobile devices, electronic systems, networks, and data from malicious attacks. It involves implementing technologies, processes, and controls to protect against cyber threats and ensure the confidentiality, integrity, and availability of information.`,

      'artificial intelligence': `Artificial Intelligence is the simulation of human intelligence in machines programmed to think and learn like humans. It includes machine learning, natural language processing, computer vision, and robotics. AI systems can analyze data, recognize patterns, make decisions, and solve complex problems across various industries.`
    };

    // Find matching response
    for (const [key, value] of Object.entries(responses)) {
      if (lowerQuestion.includes(key)) {
        return value;
      }
    }

    // Default response with job context
    const jobInfo = selectedJobDescription ? 
      `For the ${selectedJobDescription.title} position at ${selectedJobDescription.company}, ` : '';

    return `${jobInfo}That's a great question! While I don't have a specific built-in response for "${question}", I'd recommend focusing on how your experience and skills directly relate to the role. Consider using the STAR method (Situation, Task, Action, Result) to structure your response with specific examples. For more comprehensive AI-powered responses, please add your Groq API key in the settings.`;
  };

  return (
    <div className="bg-white rounded-2xl shadow-sm border border-gray-200">
      {/* Header with Pallybot AI branding */}
      <div className="px-6 py-4 border-b border-gray-200">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-3">
            <div className="flex items-center justify-center w-10 h-10 bg-gradient-to-r from-blue-500 to-purple-600 rounded-xl">
              <Bot className="w-6 h-6 text-white" />
            </div>
            <div>
              <h2 className="text-xl font-bold text-gray-900 font-display">Pallybot AI Voice Assistant</h2>
              <p className="text-sm text-gray-600">Practice your interview responses with AI-powered guidance</p>
            </div>
          </div>
          <button
            onClick={() => setShowSettings(!showSettings)}
            className="p-2 text-gray-500 hover:text-gray-700 hover:bg-gray-100 rounded-lg transition-colors"
          >
            <Settings className="w-5 h-5" />
          </button>
        </div>
      </div>

      {/* Settings Panel */}
      {showSettings && (
        <div className="px-6 py-4 bg-gray-50 border-b border-gray-200">
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Groq API Key (Optional - for enhanced AI responses)
              </label>
              <input
                type="password"
                placeholder="Enter your Groq API key for better responses"
                value={groqApiKey}
                onChange={(e) => setGroqApiKey(e.target.value)}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
              <p className="text-xs text-gray-500 mt-1">
                Get your free API key at console.groq.com. Without this, Pallybot AI uses built-in responses.
              </p>
            </div>
          </div>
        </div>
      )}

      {/* Voice Controls */}
      <div className="p-6">
        <div className="flex flex-col items-center space-y-6">
          {/* Microphone Button */}
          <div className="relative">
            <button
              onClick={isListening ? stopListening : startListening}
              disabled={isLoading}
              className={`relative w-20 h-20 rounded-full flex items-center justify-center transition-all duration-300 ${
                isListening
                  ? 'bg-red-500 hover:bg-red-600 scale-110'
                  : 'bg-blue-500 hover:bg-blue-600'
              } ${isLoading ? 'opacity-50 cursor-not-allowed' : ''}`}
            >
              {isListening ? (
                <MicOff className="w-8 h-8 text-white" />
              ) : (
                <Mic className="w-8 h-8 text-white" />
              )}

              {/* Audio Level Visualization */}
              {isListening && (
                <div 
                  className="absolute inset-0 rounded-full border-4 border-red-300 animate-pulse"
                  style={{
                    transform: `scale(${1 + (audioLevel / 128) * 0.5})`,
                    opacity: 0.6
                  }}
                />
              )}
            </button>

            {/* Status Text */}
            <div className="text-center mt-4">
              <p className="text-lg font-semibold text-gray-900">
                {isListening ? 'Pallybot AI is Listening...' : 'Click to Start Speaking'}
              </p>
              <p className="text-sm text-gray-600">
                {isListening ? 'Speak your interview question' : 'Practice your interview with AI guidance'}
              </p>
            </div>
          </div>

          {/* Audio Level Indicator */}
          {isListening && (
            <div className="w-full max-w-md">
              <div className="flex items-center space-x-2">
                <Volume2 className="w-4 h-4 text-gray-500" />
                <div className="flex-1 bg-gray-200 rounded-full h-2">
                  <div 
                    className="bg-blue-500 h-2 rounded-full transition-all duration-100"
                    style={{ width: `${(audioLevel / 128) * 100}%` }}
                  />
                </div>
              </div>
            </div>
          )}
        </div>

        {/* Transcript Section */}
        {transcript && (
          <div className="mt-8 p-4 bg-blue-50 rounded-xl border border-blue-200">
            <h3 className="text-lg font-semibold text-blue-900 mb-2 font-display">You asked:</h3>
            <p className="text-blue-800 leading-relaxed">{transcript}</p>
          </div>
        )}

        {/* Response Section */}
        {(response || isLoading) && (
          <div className="mt-6 p-4 bg-green-50 rounded-xl border border-green-200">
            <div className="flex items-center space-x-2 mb-3">
              <div className="flex items-center justify-center w-6 h-6 bg-gradient-to-r from-blue-500 to-purple-600 rounded-lg">
                <Bot className="w-4 h-4 text-white" />
              </div>
              <h3 className="text-lg font-semibold text-green-900 font-display">Pallybot AI Response:</h3>
            </div>
            {isLoading ? (
              <div className="flex items-center space-x-2">
                <div className="animate-spin rounded-full h-4 w-4 border-2 border-green-600 border-t-transparent" />
                <p className="text-green-700">Generating intelligent response...</p>
              </div>
            ) : (
              <p className="text-green-800 leading-relaxed whitespace-pre-wrap">{response}</p>
            )}
          </div>
        )}

        {/* Help Text */}
        <div className="mt-8 text-center text-gray-500 text-sm">
          <p>💡 Try asking: "Tell me about yourself", "Why do you want this job?", or "What are your strengths?"</p>
          {selectedJobDescription && (
            <p className="mt-1">🎯 Job-specific context: {selectedJobDescription.title} at {selectedJobDescription.company}</p>
          )}
        </div>
      </div>
    </div>
  );
}
